# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is Raindrop.
#
# The Initial Developer of the Original Code is
# Mozilla Messaging, Inc..
# Portions created by the Initial Developer are Copyright (C) 2009
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#

#
# shareserver - app configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
[DEFAULT]
# debug = true
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

# add bitly info then change test_shortener to no
test_shortener = yes
bitly.userid = FILL_ME_IN
bitly.key = FILL_ME_IN

oauth_failure = /auth.html#oauth_failure
oauth_success = /auth.html#oauth_success

# Register with twitter at http://dev.twitter.com/apps/new
oauth.twitter.com.consumer_key = FILL_ME_IN
oauth.twitter.com.consumer_secret = FILL_ME_IN
oauth.twitter.com.request = https://twitter.com/oauth/request_token
oauth.twitter.com.access = https://twitter.com/oauth/access_token
oauth.twitter.com.authorize = https://twitter.com/oauth/authenticate

# Register with facebook at http://developers.facebook.com/setup/
oauth.facebook.com.app_id = FILL_ME_IN
oauth.facebook.com.app_secret = FILL_ME_IN
oauth.facebook.com.api_key = FILL_ME_IN
oauth.facebook.com.scope = publish_stream,offline_access
oauth.facebook.com.authorize = https://graph.facebook.com/oauth/authorize
oauth.facebook.com.access = https://graph.facebook.com/oauth/access_token

# Register with Google at https://www.google.com/accounts/ManageDomains
oauth.google.com.consumer_key = FILL_ME_IN
oauth.google.com.consumer_secret = FILL_ME_IN
oauth.google.com.scope = https://mail.google.com/ http://www.google.com/m8/feeds/

# Register with Yahoo! at https://developer.apps.yahoo.com/projects
# Yahoo scope is embeded in the consumer_key and is selected at registration time
# You will need to setup an application with Yahoo on a domain where you can
# upload an html file in order to verify the application.  once verified,
# also set verified = 1
oauth.yahoo.com.consumer_key = FILL_ME_IN
oauth.yahoo.com.consumer_secret = FILL_ME_IN
oauth.yahoo.com.app_id = FILL_ME_IN
# set to true if you have completed domain verification with Yahoo
oauth.yahoo.com.verified = 0

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 5000

[filter-app:main]
use = egg:Beaker#beaker_session
next = csrf
beaker.session.key = linkdrop
beaker.session.secret = ${app_instance_secret}

# XXX file sessions are slow, should change to memcached or database.  be sure
# to set lock_dir below if using memcached

beaker.session.type = file
#beaker.session.type = ext:memcached
#beaker.session.url = 127.0.0.1:11211
#beaker.session.type = ext:database
#beaker.session.url = mysql+mysqldb://linkdrop:linkdrop@localhost/linkdrop

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
beaker.cache.data_dir = %(here)s/data/cache
beaker.session.data_dir = %(here)s/data/sessions
beaker.session.lock_dir = %(here)s/data/sessions/lock

[filter-app:csrf]
use = egg:ShareServer#csrf
# allow access to account api's for oauth, which will not have csrf token
# be sure to use the FULL path
csrf.unprotected_path = /api/account
next = sessioned

[composite:sessioned]
use = egg:Paste#urlmap
/ = home
/api = api

[app:home]
use = egg:Paste#static
document_root = %(here)s/web

[app:api]
use = egg:ShareServer
full_stack = true
static_files = true
session_middleware = false

cache_dir = %(here)s/data
app_instance_uuid = ${app_instance_uuid}

# SQLAlchemy database URL
sqlalchemy.url = sqlite:///production.db
#sqlalchemy.url = mysql+mysqldb://linkdrop:linkdrop@localhost/linkdrop

# SQLAlchemy migration
# if managed, the migration repository is here
migrate.repository = %(here)s/changes
# automatically do database upgrades
migrate.auto = 0

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
set debug = false

# Logging configuration
[loggers]
keys = root, routes, linkdrop, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_routes]
level = INFO
handlers =
qualname = routes.middleware
# "level = DEBUG" logs the route matched and routing variables.

[logger_linkdrop]
level = WARN
handlers =
qualname = linkdrop

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] [%(threadName)s] %(message)s
datefmt = %H:%M:%S
