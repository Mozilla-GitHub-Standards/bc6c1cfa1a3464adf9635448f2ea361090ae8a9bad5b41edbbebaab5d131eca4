# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is Raindrop.
#
# The Initial Developer of the Original Code is
# Mozilla Messaging, Inc..
# Portions created by the Initial Developer are Copyright (C) 2009
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#

#
# ShareServer - testing environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
[DEFAULT]
debug = true
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost
test_shortener = yes

# We specify our local test server is used for all service connections.
stub_service_server=127.0.0.1:8327

oauth_failure = /dev/auth.html#oauth_failure
oauth_success = /dev/auth.html#oauth_success

# Note we do *not* use valid keys and secrets here as the automated tests
# must not hit the service directly.
# See comments in main .ini file for additional comments about these.
oauth.twitter.com.consumer_key = twitter_key
oauth.twitter.com.consumer_secret = twitter_secret
oauth.twitter.com.request = http://%(stub_service_server)s/oauth/request_token
oauth.twitter.com.access = http://%(stub_service_server)s/oauth/access_token
oauth.twitter.com.authorize = http://%(stub_service_server)s/oauth/authenticate
oauth.twitter.com.host = %(stub_service_server)s
oauth.twitter.com.secure = False

oauth.facebook.com.app_id = facebook_app_id
oauth.facebook.com.app_secret = facebook_app_secret
oauth.facebook.com.scope = publish_stream
#oauth.facebook.com.authorize = http://%(stub_service_server)s/fake_oauth/facebook/authorize
#oauth.facebook.com.access = http://%(stub_service_server)s/fake_oauth/facebook/access_token
#oauth.facebook.com.profile = http://%(stub_service_server)s/facebook/me
#oauth.facebook.com.feed = http://%(stub_service_server)s/facebook/feed

# XXX This will not work without registering a domain!  See README
oauth.google.com.consumer_key = anonymous
oauth.google.com.consumer_secret = anonymous
oauth.google.com.scope = https://mail.google.com/ http://www.google.com/m8/feeds/

oauth.yahoo.com.consumer_key = FILL_ME_IN
oauth.yahoo.com.consumer_secret = FILL_ME_IN
oauth.yahoo.com.app_id = FILL_ME_IN
# set to true if you have completed domain verification with Yahoo
oauth.yahoo.com.verified = 0

oauth.linkedin.com.consumer_key = A_BIT_OF_A_SECRET
oauth.linkedin.com.consumer_secret = TOP_SECRET
oauth.linkedin.com.request = https://api.linkedin.com/uas/oauth/requestToken
oauth.linkedin.com.access = https://api.linkedin.com/uas/oauth/accessToken
oauth.linkedin.com.authorize = https://api.linkedin.com/uas/oauth/authorize

sstatus.enabled = 0
sstatus.servers = 127.0.0.1:11211
sstatus.domains = google.com,twitter.com,facebook.com,linkedin.com

[server:main]
use = egg:Paste#http
host = 127.0.0.1
port = 5000

[app:main]
#use: config:api.ini

use = egg:ShareServer
full_stack = false
static_files = false

cache_dir = %(here)s/data
beaker.session.key = linkdrop
beaker.session.secret = somesecret

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions

# SQLAlchemy database URL
sqlalchemy.url = sqlite:///%(here)s/test.db
sqlalchemy.echo = False

# SQLAlchemy migration
# if managed, the migration repository is here
migrate.repository = %(here)s/changes
# automatically do database upgrades
migrate.auto = 1

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#set debug = false

# to turn on profiling or debugging with dbgp uncomment a filter
#filter-with = profiler
#filter-with = dbgp

# Logging configuration
[loggers]
keys = root, routes, linkdrop, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console

[logger_routes]
level = INFO
handlers =
qualname = routes.middleware
# "level = DEBUG" logs the route matched and routing variables.

[logger_linkdrop]
level = WARNING
handlers =
qualname = linkdrop

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] [%(threadName)s] %(message)s
datefmt = %H:%M:%S
